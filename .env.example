# Module Federation Remote Apps Configuration
#
# VITE_REMOTES is a JSON object with a "remotes" array
# Each remote requires:
#   - remoteName: Unique identifier for the remote app
#   - url: URL to the remote's remoteEntry.js file (use /assets/remoteEntry.js for @originjs/vite-plugin-federation)
#   - components: Array of component configurations with componentName and route
#
# Schema (from App.tsx):
# {
#   remotes: [
#     {
#       remoteName: string,
#       url: string,
#       components: [
#         {
#           componentName: string,
#           route: string
#         }
#       ]
#     }
#   ]
# }
#
# Example structure:
VITE_REMOTES='{
  "remotes": [
    {
      "remoteName": "authApp",
      "url": "http://localhost:3001/assets/remoteEntry.js",
      "components": [
        {
          "componentName": "Login",
          "route": "/login"
        },
        {
          "componentName": "UserProfile",
          "route": "/profile"
        }
      ]
    },
    {
      "remoteName": "bookingApp",
      "url": "http://localhost:3002/assets/remoteEntry.js",
      "components": [
        {
          "componentName": "BookingForm",
          "route": "/booking"
        },
        {
          "componentName": "BookingList",
          "route": "/bookings"
        }
      ]
    },
    {
      "remoteName": "reportingApp",
      "url": "http://localhost:3003/assets/remoteEntry.js",
      "components": [
        {
          "componentName": "ReportingApp",
          "route": "/reports"
        }
      ]
    }
  ]
}'

# To add a new micro-frontend:
# 1. Add a new object to the "remotes" array
# 2. Set remoteName to match your app name
# 3. Set url to point to /assets/remoteEntry.js
# 4. Add components with componentName (exposed module) and route (URL path)
# 5. Restart the shell-app dev server
# 6. No rebuild required!
